#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');
var faye = require("faye");
var HashMap = require('hashmap');
const config = require('../config/index');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
* Create a faye node and attach to http server
*
*/
var bayeux = new faye.NodeAdapter({
    mount: '/faye',
    timeout: 5
});
app.locals.fayeClient = bayeux.getClient();
bayeux.attach(server);


/**
*. Maintain list of all subscribed channels
*/
var map = new HashMap();
app.locals.subscriptionMap = map;
bayeux.on('subscribe', function(message, channel) {
  var hasChannel = map.has(channel);
  if(hasChannel){
    var subscriptionCount = map.get(channel);
    map.set(channel, subscriptionCount+1);
  }else{
    map.set(channel, 1);
  }
});

bayeux.on('unsubscribe', function(message, channel) {
    if(map.has(channel)){
      var subscriptionCount = map.get(channel);
      if(subscriptionCount==1){
        map.remove(channel);
      }else{
        map.set(channel, subscriptionCount-1);
      }
    }else{
      console.log("cannot unsubscribe a channel who has never subscribed");
    }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
